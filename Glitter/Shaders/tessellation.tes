#version 410 core                                                                               
                                                                                                
layout(triangles, equal_spacing, ccw) in;  

uniform mat4 view;                                                                                                 
uniform mat4 viewProjection; 
uniform sampler2D displacement;
uniform sampler2D diffuse;
uniform sampler2D normal;
uniform sampler2D specular;
uniform sampler2D emissive;
uniform float displacementCof;
uniform bool hasNormalMap;
uniform bool hasSpec;
uniform bool hasEmiss;
                                                                                                
struct OutputPatch                                                                              
{                                                                                               
    vec3 WorldPos_B030;                                                                                                                                                
    vec3 WorldPos_B003;                                                                                                                                                 
    vec3 WorldPos_B300;                                                                                                                                                
    vec3 Normal[3];         
    vec2 TexCoord[3];
    vec3 Tangent[3];
    int  TriId;
};                                                                                               
                                                                                                
in patch OutputPatch oPatch;                                                                    
                                                                                                
out vec3 Pos_FS_in;                                                                                                                                              
out vec3 Nor_FS_in;
out vec3 Col_FS_in; 
out vec3 Spe_FS_in;
out vec3 Emi_FS_in;
flat out int TriId_FS_in;
                                                                                                
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                   
{                                                                                               
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;   
}                                                                                               
                                                                                                
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                   
{                                                                                               
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;   
}       

vec3 CalcBumpedNormal(vec3 nor_in, vec3 tan_in, vec2 tex_in)                                                                     
{        
    vec3 Normal = normalize(nor_in);                                                       
    vec3 Tangent = normalize(tan_in);                                                     
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);                           
    vec3 Bitangent = cross(Normal, Tangent);                                                
    vec3 BumpMapNormal = texture(normal, tex_in).xyz;                                
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);                                                                                                       
    mat3 TBN = mat3(Tangent, Bitangent, Normal);                                                                                                  
    return normalize(TBN * BumpMapNormal);                                                                       
} 
                                                                                                
void main()                                                                                     
{                                                                                               
    // Interpolate the attributes of the output vertex using the barycentric coordinates    
    vec2 tex_in = interpolate2D(oPatch.TexCoord[0], oPatch.TexCoord[1], oPatch.TexCoord[2]); 
    vec3 nor_in = interpolate3D(oPatch.Normal[0], oPatch.Normal[1], oPatch.Normal[2]);    
    vec3 tan_in = interpolate3D(oPatch.Tangent[0], oPatch.Tangent[1], oPatch.Tangent[2]); 

    float u = gl_TessCoord.x;                                                                   
    float v = gl_TessCoord.y;                                                                   
    float w = gl_TessCoord.z;                                                                   
    float uPow3 = pow(u, 3);                                                                    
    float vPow3 = pow(v, 3);                                                                    
    float wPow3 = pow(w, 3);                                                                    
    float uPow2 = pow(u, 2);                                                                    
    float vPow2 = pow(v, 2);                                                                    
    float wPow2 = pow(w, 2);   

    Pos_FS_in = interpolate3D(oPatch.WorldPos_B030, oPatch.WorldPos_B003, oPatch.WorldPos_B300); 

					 
	float Displacement = texture(displacement, tex_in.xy).x;   
	Pos_FS_in += nor_in * Displacement * displacementCof; 
    gl_Position = viewProjection * vec4(Pos_FS_in, 1.0);   
    Pos_FS_in  = (view * vec4(Pos_FS_in, 1.0)).xyz;
    TriId_FS_in = oPatch.TriId;

    Col_FS_in = texture(diffuse, tex_in).xyz;

    if (hasNormalMap) Nor_FS_in = CalcBumpedNormal(nor_in, tan_in, tex_in);
    else Nor_FS_in = nor_in;

    if (hasSpec) Spe_FS_in = vec3(texture(specular, tex_in).x);
    else Spe_FS_in = vec3(1.0);

    if (hasEmiss) Emi_FS_in = texture(emissive, tex_in).xyz;
    else Emi_FS_in = vec3(0.0);
}                  
